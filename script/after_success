#!/bin/bash

# Deploy key generated with:
# $ ssh-keygen -t rsa -C "${GIT_EMAIL}"
# Private key encrypted with:
# $ base64 --wrap=0 id_rsa | perl -pe 's/(.{100})/$1\n/g' | nl | perl -pe 's/\s*(\d+)\s*(.*)/id_rsa_$1="$2"/' | xargs -I % travis encrypt % --add
# This generated 23 environment variables: id_rsa_1 .. id_rsa_23

set -ev

# If we don't have credentials to the GitHub repo, then we don't continue
if [ -z "$id_rsa_1" ]; then
  exit 0
fi

# Configure identity for git commit
git config user.email "${GIT_EMAIL}"
git config user.name "${GIT_NAME}"

# Create a branch to commit the generate site into
git checkout -b build

# Add and commit all the contents of the _site folder
git add --all --force _site
git commit -q -m "travis gh-pages build"
git clean -qdfx

# Configure gh-pages branch since Travis did not
git remote set-branches --add origin gh-pages
git fetch --depth=50 origin gh-pages

# Checkout gh-pages branch
git checkout gh-pages

# Reset the index to be the same as the _site folder committed to the build branch
git reset -q build:_site/ -- .

# Commit the index
git commit -m "travis gh-pages build ${TRAVIS_BUILD_NUMBER}" -m "https://github.com/${TRAVIS_REPO_SLUG}/commit/${TRAVIS_COMMIT}"

# Set up the ssh private key to enable pushing to GitHub
echo -n $id_rsa_{1..23} | base64 --decode --ignore-garbage > ~/.ssh/travisci_rsa
chmod 600 ~/.ssh/travisci_rsa
echo -e "\nHost github.com *.github.com\nIdentityFile ~/.ssh/travisci_rsa\nStrictHostKeyChecking no\nPasswordAuthentication no\nCheckHostIP no\nBatchMode yes\n" >> ~/.ssh/config

# Push the updated gh-pages branch to GitHub
git remote set-url --push origin "git@github.com:${TRAVIS_REPO_SLUG}.git"
git push origin gh-pages
